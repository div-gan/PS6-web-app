hist(gapminder$gdp[gapminder$year == 1960], main = "GDP per capita in 1960",
xlab = "GDP per capita")
hist(gapminder$gdp[gapminder$year == 2019], main = "GDP per capita in 2019",
xlab = "GDP per capita", col = "blue", alpha = 0.5, add = TRUE, border = "white", density = 15)
# What was the ranking of US in terms of life expectancy in 1960 and in 2019? (When
# counting from top.
rank(gapminder$life_exp[gapminder$year == 1960 & gapminder$country == "United States"])
rank(gapminder$life_exp[gapminder$year == 2019 & gapminder$country == "United States"])
#If you did this correctly, then you noticed that US ranking has been falling quite a
# bit. But we also have more countries in 2019–what about the relative rank divided by the
# corresponding number of countries that have LE data in the corresponding year?
rank(gapminder$life_exp[gapminder$year == 1960 & gapminder$country == "United States"])/sum(!is.na(gapminder$lifeExp[gapminder$year == 1960]))
rank(gapminder$life_exp[gapminder$year == 2019 & gapminder$country == "United States"])/sum(!is.na(gapminder$lifeExp[gapminder$year == 2019]))
# Hours spend on PS5: 5
# PS 5
library(dplyr)
library(ggplot2)
library(tidyverse)
## 1. Load data set
# Load the gapminder dataset
gapminder <- read.csv("gapminder_data_graphs.csv")
# a. Check the dimensions of the dataset and print number of rows and colmns
ncol(gapminder)
nrow(gapminder)
# b. Print a small sample of the data
head(gapminder)
print("The data looks okay")
## 2. Descriptive Statistics
# Find the number of unique countries in each column
num_countries_iso3 <- length(unique(gapminder$iso3c))
num_countries_iso2 <- length(unique(gapminder$iso2c))
num_countries_name <- length(unique(gapminder$country))
# Print the results
# cat("Number of countries by iso3 code:", num_countries_iso3, "\n")
# cat("Number of countries by iso2 code:", num_countries_iso2, "\n")
# cat("Number of countries by name:", num_countries_name, "\n")
# Count the number of names for each iso2 code
iso2_names <- table(gapminder$iso2c, gapminder$country)
# Find the iso2 codes that correspond to more than one name
dup_iso2 <- which(rowSums(iso2_names > 0) > 1)
# Print the results
cat("Iso2 codes with more than one name:", paste(names(dup_iso2), collapse = ", "), "\n")
# Count the number of iso3 codes for each country name
name_iso3 <- table(gapminder$country, gapminder$iso3c)
# Find the country names that have more than one iso3 code
dup_names <- which(rowSums(name_iso3 > 0) > 1)
# Print the results
cat("Country names with more than one iso3 code:", paste(names(dup_names), collapse = ", "), "\n")
# Find the minimum and maximum year in the dataset
min_year <- min(gapminder$year)
max_year <- max(gapminder$year)
# Print the results
cat("Minimum year:", min_year, "\n")
cat("Maximum year:", max_year, "\n")
## 3. CO2 emissions
# How many missing co2 emissions are there for each year? Analyze both missing CO2
# and co2_PC. Which years have most missing data?
gapminder %>%
select(year, co2_consump) %>%
group_by(year) %>%
summarize(
n_missing_co2 = sum(is.na(co2_consump)),
)
# Make a plot of total CO2 emissions over time for the U.S, China, and India. Add a few
# more countries of your choice. Explain what do you see
# Create a subset of data for selected countries
countries <- c("United States", "China", "India", "Germany", "Russia", "Brazil")
gapminder_sub <- gapminder %>% filter(country %in% countries)
# Plot total CO2 emissions over time
library(ggplot2)
ggplot(gapminder_sub, aes(x = year, y = co2_consump, color = country)) +
geom_line(size = 1) +
scale_y_log10() +
labs(title = "Total CO2 Emissions Over Time",
x = "Year",
y = "Total CO2 Emissions (metric tons)",
color = "Country")
print("The plot shows the trend of total CO2 emissions over time for selected countries.
It seems that China's total CO2 emissions have rapidly increased over the years,
India's total CO2 emissions have also increased, but at a slower rate compared to China.
Germany and Russia have fairly stable total CO2 emissions,
while Brazil has seen an increase in recent years.")
# Now let’s analyze the CO2 emissions per capita (co2_PC ). Make a similar plot of the
# same countries. What does this figure suggest?
# Plot CO2 emissions per capita over time
ggplot(gapminder_sub, aes(x = year, y = co2_consump, color = country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions Per Capita Over Time",
x = "Year",
y = "CO2 Emissions Per Capita (metric tons)",
color = "Country")
print ("The plot shows the trend of CO2 emissions per capita over time for selected countries.
It suggests that while China and India have lower CO2 emissions per capita compared to the United States,
their CO2 emissions per capita have been increasing rapidly.
Germany and Russia have fairly stable CO2 emissions per capita.")
# Compute average CO2 emissions per capita across the continents (assume region is the
# same as continent). Comment what do you see.
gapminder_continent <- gapminder %>%
group_by(continent, year) %>%
summarize(avg_co2_pc = mean(co2_consump, na.rm = TRUE))
gapminder_continent
#Make a barplot where you show the previous results–average CO2 emissions per capita
# across continents in 1960 and 2016.
# Filter data for the years 1960 and 2016
co2_continent <- gapminder %>%
filter(year == 1960 | year == 2016) %>%
group_by(continent, year) %>%
summarise(avg_co2_pc = mean(co2_consump, na.rm = TRUE))
# Create barplot
ggplot(co2_continent, aes(x = continent, y = avg_co2_pc, fill = as.factor(year))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average CO2 Emissions per Capita Across Continents",
subtitle = "1960 vs. 2016",
x = "Continent", y = "Average CO2 Emissions per Capita") +
scale_fill_manual(values = c("orange", "purple")) +
theme_bw()
# Which countries are the three largest, and three smallest CO2 emitters (in terms of CO2 per
# capita) in 2019 for each continent? (Assume region is continent).
co2_2019 <- gapminder %>%
filter(year == 2019)
# Group by continent and country, and calculate the average CO2 per capita
co2_continent <- co2_2019 %>%
group_by(continent, country) %>%
summarise(avg_co2_pc = mean(co2_consump, na.rm = TRUE))
# Find the three largest and three smallest CO2 emitters for each continent
co2_top_bottom <- co2_continent %>%
group_by(continent) %>%
arrange(desc(avg_co2_pc)) %>%
slice_head(n = 3) %>%
bind_rows(
co2_continent %>%
group_by(continent) %>%
arrange(avg_co2_pc) %>%
slice_head(n = 3)
)
co2_top_bottom
## 4. GDP per capita
# Make a scatterplot of GDP per capita versus life expectancy by country, using data for
#1960. Make the point size dependent on the country size, and color
#those according to the continent.
# ggplot(filter(year == 1960),
#        aes(x = gdp, y = life_exp)) +
#   geom_point(aes(size = population, color = continent)) +
#   scale_size_continuous(range = c(1, 15), breaks = c(0, 5e8, 1e9, 2e9, 4e9, 8e9)) +
#   scale_color_manual(values = c("#F8766D", "#7CAE00", "#00BFC4", "#C77CFF", "#619CFF")) +
#   labs(x = "GDP per capita", y = "Life expectancy", title = "1960") +
#   theme_minimal()
print("There is a positive relationship between these two variables,
with higher GDP per capita generally associated with higher life expectancy.")
# Make a similar plot, but this time use 2019 data only
# ggplot(filter(year == 2019),
#        aes(x = gdp, y = life_exp)) +
#   geom_point(aes(size = population, color = continent)) +
#   scale_size_continuous(range = c(1, 15), breaks = c(0, 5e8, 1e9, 2e9, 4e9, 8e9)) +
#   scale_color_manual(values = c("#F8766D", "#7CAE00", "#00BFC4", "#C77CFF", "#619CFF")) +
#   labs(x = "GDP per capita", y = "Life expectancy", title = "2019") +
#   theme_minimal()
print("the overall relationship between GDP per capita and life expectancy is still positive,
but there is more variation in both variables compared to 1960. ")
# Compare these two plots and comment what do you see. How has world developed
# through the last 60 years?
print("Comparing the two scatterplots, we can see that the world has experienced
significant changes over the past 60 years. In general, both GDP per capita
and life expectancy have increased, but there is also more variation in
these variables across countries. ")
# Compute the average life expectancy for each continent in 1960 and 2019.
# Do the results fit with what do you see on the figures?
gapminder_1960 <- filter(gapminder, year == 1960)
gapminder_2019 <- filter(gapminder, year == 2019)
life_exp_1960 <- list(life_exp ~ continent, gapminder_1960, mean)
life_exp_2019 <- list(life_exp ~ continent, gapminder_2019, mean)
life_exp_1960
life_exp_2019
print("yes, the results fit with the figures")
# Compute the average LE growth from 1960-2019 across the continents. Show the results
# in the order of growth. Explain what do you see.
life_exp_growth <- gapminder %>%
group_by(continent) %>%
mutate(lifeExp_lag = lag(life_exp)) %>%
filter(!is.na(lifeExp_lag)) %>%
summarise(growth = mean((life_exp - lifeExp_lag) / lifeExp_lag) * 100)
life_exp_growth <- life_exp_growth[order(life_exp_growth$growth),]
life_exp_growth
print("Africa had the highest average life expectancy growth rate Asia had the second highest growth rate,
followed by the Americas, Oceania, and Europe.")
#Show the histogram of GDP per capita for years of 1960 and 2019. Try to put both
# histograms on the same graph,
# hist(gapminder$gdp[gapminder$year == 1960], main = "GDP per capita in 1960",
#      xlab = "GDP per capita")
#
# hist(gapminder$gdp[gapminder$year == 2019], main = "GDP per capita in 2019",
#      xlab = "GDP per capita", col = "blue", alpha = 0.5, add = TRUE, border = "white", density = 15)
# What was the ranking of US in terms of life expectancy in 1960 and in 2019? (When
# counting from top.
rank(gapminder$life_exp[gapminder$year == 1960 & gapminder$country == "United States"])
rank(gapminder$life_exp[gapminder$year == 2019 & gapminder$country == "United States"])
#If you did this correctly, then you noticed that US ranking has been falling quite a
# bit. But we also have more countries in 2019–what about the relative rank divided by the
# corresponding number of countries that have LE data in the corresponding year?
rank(gapminder$life_exp[gapminder$year == 1960 & gapminder$country == "United States"])/sum(!is.na(gapminder$lifeExp[gapminder$year == 1960]))
rank(gapminder$life_exp[gapminder$year == 2019 & gapminder$country == "United States"])/sum(!is.na(gapminder$lifeExp[gapminder$year == 2019]))
# Hours spend on PS5: 5
setwd("~/Documents/Info201/PS6-web-app")
#PS 6
# Load libraries
library(shiny)
library(tidyverse)
library(DT)
# load data
movies_data <- read_csv("movies.csv")
ui <- fluidPage(
titlePanel("Top 100 Popular Movies from 2003 to 2022"),
tabsetPanel(
tabPanel("About",
h3("About the Dataset"),
p("This dataset contains information about the top 100 popular movies from 2003 to 2022, as rated by IMDb users."),
p("The dataset includes the following variables:"),
tags$ul(
tags$li("Title: The title of the movie."),
tags$li("Year: The year in which the movie was released."),
tags$li("Runtime: The duration of the movie in minutes."),
tags$li("Genre: The genre(s) of the movie."),
tags$li("IMDb Rating: The rating of the movie on a scale of 0 to 10."),
tags$li("Director: The name of the director(s) of the movie."),
tags$li("Cast: The name of the lead actors/actresses in the movie.")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("x_var", "Select X-Axis Variable",
choices = c("Year", "Runtime", "IMDb Rating")),
selectInput("y_var", "Select Y-Axis Variable",
choices = c("Year", "Runtime", "IMDb Rating")),
selectInput("plot_type", "Select Plot Type",
choices = c("Scatterplot", "Line Graph", "Bar Plot"))
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("filter_genre", "Filter by Genre",
choices = c("All Genres", unique(movies_data$Genre))),
sliderInput("filter_rating", "Filter by IMDb Rating",
min = 0, max = 10, value = c(0, 10), step = 0.1)
),
mainPanel(
DTOutput("table")
)
)
)
)
)
#PS 6
# Load libraries
library(shiny)
library(tidyverse)
library(DT)
# load data
movies_data <- read_csv("movies.csv")
ui <- fluidPage(
titlePanel("Top 100 Popular Movies from 2003 to 2022"),
tabsetPanel(
tabPanel("About",
h3("About the Dataset"),
p("This dataset contains information about the top 100 popular movies from 2003 to 2022, as rated by IMDb users."),
p("The dataset includes the following variables:"),
tags$ul(
tags$li("Title: The title of the movie."),
tags$li("Year: The year in which the movie was released."),
tags$li("Runtime: The duration of the movie in minutes."),
tags$li("Genre: The genre(s) of the movie."),
tags$li("IMDb Rating: The rating of the movie on a scale of 0 to 10."),
tags$li("Director: The name of the director(s) of the movie."),
tags$li("Cast: The name of the lead actors/actresses in the movie.")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("x_var", "Select X-Axis Variable",
choices = c("Year", "Runtime", "IMDb Rating")),
selectInput("y_var", "Select Y-Axis Variable",
choices = c("Year", "Runtime", "IMDb Rating")),
selectInput("plot_type", "Select Plot Type",
choices = c("Scatterplot", "Line Graph", "Bar Plot"))
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("filter_genre", "Filter by Genre",
choices = c("All Genres", unique(movies_data$Genre))),
sliderInput("filter_rating", "Filter by IMDb Rating",
min = 0, max = 10, value = c(0, 10), step = 0.1)
),
mainPanel(
DTOutput("table")
)
)
)
)
)
runApp('Assignment6.R')
runApp('Assignment6.R')
runApp('Assignment6.R')
# Load necessary libraries
library(shiny)
library(DT)
# Load dataset
movies <- read.csv("IMDB_Top_100_movies_from_2003_to_2022.csv")
# Filter dataset to only include movies from 2022 and 2021
movies_2022_2021 <- subset(movies, year %in% c(2022, 2021))
# Sort filtered dataset in descending order of ratings
movies_sorted <- movies_2022_2021[order(-movies_2022_2021$imdb_rating),]
# Select the top 20 movies from the sorted dataset
top_20_movies <- head(movies_sorted, 20)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Top 20 Highest Rated Movies in 2022 and 2021"),
mainPanel(
DT::dataTableOutput("movie_table")
)
)
# Define server logic for the Shiny app
server <- function(input, output) {
output$movie_table <- DT::renderDataTable({
DT::datatable(top_20_movies,
options = list(pageLength = 20),
rownames = FALSE)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Load dataset
movies <- read.csv("movies.csv")
# Load necessary libraries
library(shiny)
library(DT)
# Load dataset
movies <- read.csv("movies.csv")
# Filter dataset to only include movies from 2022 and 2021
movies_2022_2021 <- subset(movies, year %in% c(2022, 2021))
# Sort filtered dataset in descending order of ratings
movies_sorted <- movies_2022_2021[order(-movies_2022_2021$imdb_rating),]
# Select the top 20 movies from the sorted dataset
top_20_movies <- head(movies_sorted, 20)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Top 20 Highest Rated Movies in 2022 and 2021"),
mainPanel(
DT::dataTableOutput("movie_table")
)
)
# Define server logic for the Shiny app
server <- function(input, output) {
output$movie_table <- DT::renderDataTable({
DT::datatable(top_20_movies,
options = list(pageLength = 20),
rownames = FALSE)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
runApp('Assignment6.R')
library(shiny); runApp('final project - interactice page 2.R')
setwd("~/Documents/Info201/PS6-web-app")
runApp('final project - interactice page 2.R')
runApp('final project - interactice page 2.R')
shinyApp(ui = ui, server = server)
# Loading required libraries
library(shiny)
library(tidyverse)
library(readr)
library(dplyr)
library(plotly)
library(DT)
# Load data
data <- read.csv("SAT Report 2015-2016.csv")
ui <- fluidPage(
titlePanel("California SAT Scores Evaluation"),
tabsetPanel(
# First tab of the app
tabPanel("Project Overview",
p(strong("Project Purpose:"), style = "font-size:30px;"),
p("The SAT is a standardized test
commonly used in the United States for college admissions."),
p("The test is designed to assess a student's knowledge and skills
in reading, writing, and mathematics, and is often a requirement
for admission to many colleges and universities."),
p("Analyzing the SAT scores of California students by region and
school can help identify many disparities in education quality and access."),
p("By analyzing SAT
scores and number of test takers, people can better understand the
challenges and needs of different regions and schools and how to
best help them."),
p(strong("Data Source:"), style = "font-size:30px;"),
p("This data set was taken from the kaggle SAT Results
dataset which contains the number of SAT test takers in California
and average scores by county, district, and school."),
uiOutput("tab"),
mainPanel(
img(src="image.jpg"),
)
),
tabPanel("Average SAT Scores over the counties",
sidebarLayout(
sidebarPanel(
selectInput(
"county", "select a desired county",
choices = county,
selected = 1
),
radioButtons(
"subject", "select a desired subject",
choices = list("Reading", "Math", "Writing"),
selected = "Reading"
)
),
mainPanel(
plotOutput("plot1"),
textOutput("text1"),
tags$head(tags$style("#text1{font-size: 30px;}"))
)
),
tabPanel("Number of SAT takers",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "level", label = "Select level:",
choices = c("County", "District"))
),
mainPanel(
plotlyOutput(outputId = "plot2"),
textOutput("text2"),
tags$head(tags$style("#text2{font-size: 30px;}"))
)
)
)
server <- function(input, output) {
# First plot codes by James
output$plot1 <- renderPlot({
if (input$subject == "Reading") {
naRemoved %>%
filter(cname == input$county) %>%
ggplot(aes(AvgScrRead, NumTstTakr)) +
geom_col(aes(fill=factor(AvgScrRead))) +
ggtitle("Average Reading Score and Number of Test takers in county: ", input$county)
} else if (input$subject == "Math") {
naRemoved %>%
filter(cname == input$county) %>%
ggplot(aes(AvgScrMath, NumTstTakr)) +
geom_col(aes(fill=factor(AvgScrMath))) +
ggtitle("Average Math Score and Number of Test takers in county: ", input$county)
} else {
naRemoved %>%
filter(cname == input$county) %>%
ggplot(aes(AvgScrWrit, NumTstTakr)) +
geom_col(aes(fill=factor(AvgScrWrit)))+
ggtitle("Average Writing Score and Number of Test takers in county: ", input$county)
}
})
output$text1 <- renderPrint({
cat("The graph shows the average scores of selected subject from
selected county, the size of each column is decided by
the number of test takers")
})
# Second plot by Divya
# filter data based on user input
filtered_data <- reactive({
if (input$level == "County") {
naRemoved %>%
group_by(cname) %>%
summarize(Total = (NumTstTakr))
} else {
naRemoved %>%
group_by(dname) %>%
summarize(Total = (NumTstTakr))
}
})
# Create plotly bar chart
output$plot2 <- renderPlotly({
plot_ly(data = filtered_data(), x = ~Total, y = ~as.character(filtered_data()[[1]]),
type = "bar", orientation = "v") %>%
layout(xaxis = list(title = "Total Test Takers"),
yaxis = list(title = input$level))
})
output$text2 <- renderPrint({
if (input$level == "County") {
cat("This graph shows the total number of test takers for each county in California.")
} else {
cat("This graph shows the total number of test takers for each district in California.")
}
})
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
